viewpoint:
    param int rowSize;
    param int colSize;
    param int maxNonos;

    param int rowNonos[rowSize][maxNonos];
    param int colNonos[colSize][maxNonos];

    var x[rowSize][colSize];
    var hasStartedRow[rowSize][maxNonos][colSize];

constraints:

    //Order encoding
    forall(i in 0..rowSize-1, b in 0..maxNonos-1){
        if(rowNonos[i][b] != 0){
            forall(j in 0..colSize-2){
                hasStartedRow[i][b][j] -> hasStartedRow[i][b][j+1];
            };
        }
        else{
            &&( [!hasStartedRow[i][b][j] | j in 0..colSize-1] );
        };
    };


    forall(i in 0..rowSize-1, b in 0..maxNonos-1){
        if(rowNonos[i][b] != 0){
            !hasStartedRow[i][b][colSize-rowNonos[i][b]];
        };
    };

    //Channelling between hasStarted and x
    forall(i in 0..rowSize-1, b in 0..maxNonos-1){
        if(rowNonos[i][b] != 0){
            forall(j in 0..colSize-1){
                if(j >= rowNonos[i][b]){
                    x[i][j] <- hasStartedRow[i][b][j] & !hasStartedRow[i][b][j-rowNonos[i][b]]; 
                }
                else {
                    x[i][j] <- hasStartedRow[i][b][j];
                };
            };
        };
    };

    forall(i in 0..rowSize-1){
        EK(x[i], sum(rowNonos[i]));
    };

    //Nono b abans que b+1.
    forall(i in 0..rowSize-1, b in 0..maxNonos-2){
        forall(j in 0..colSize-1){
            hasStartedRow[i][b+1][j] -> hasStartedRow[i][b][j-rowNonos[i][b]-1];
        };
    };
    

output:
    [ (x[i][j] ? "X" : " ") ++ " " ++ (j==colSize-1 ? "\n" : "") | i in 0..rowSize-1, j in 0..colSize-1];